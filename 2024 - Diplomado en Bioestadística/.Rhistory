# HOUSEKEEPING ------------------------------------------------------------
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.sto
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
library(tidyverse)
library(plotly)
library(DT)
library(utf8)
library(readr)
library(ggplot2)
knit_with_parameters("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística/02 - Estadística Descriptiva/GaviRia.Rmd")
rm(dataD)
url_base= 'https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
data.df <- read.table(url_base, header = TRUE, sep = ",", quote = "", fill = TRUE)
names(data.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
datatable(data.df)
library(DiagrammeR)
str(data)
str(data.df)
glimpse(dat.df)
glimpse(data.df)
# Variable Sex
data$sex[data$sex==1]<- "Masculino" # asigna Masculino a el valor 1 en la columna sex
url_base= 'https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
dat.df <- read.table(url_base, header = TRUE, sep = ",", quote = "", fill = TRUE)
names(data.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
datatable(data.df)
datatable(dat.df)
str(dat.df)
glimpse(dat.df)
names(dat.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
str(dat.df)
glimpse(dat.df)
# Variable Sex
data.df$sex[data.df$sex==1]<- "Masculino" # asigna Masculino a el valor 1 en la columna sex
data$sex[data$sex==0]<- "Femenino"  # asigna femenino a el valor 0 en la columna sex
dat.df$sex[dat.df$sex==0]<- "Femenino"  # asigna femenino a el valor 0 en la columna sex
str(dat.df)
glimpse(dat.df)
# Variable Sex
data.df$sex[data.df$sex==1]<- "Masculino" # asigna Masculino a el valor 1 en la columna sex
dat.df$sex[dat.df$sex==0]<- "Femenino"  # asigna femenino a el valor 0 en la columna sex
str(dat.df)
# Variable Sex
dat.df$sex[dat.df$sex==1]<- "Masculino" # asigna Masculino a el valor 1 en la columna sex
str(dat.df)
levels(dat.df$cp)
level(dat.df$cp)
dat.df$cp
# Variable cp
dat.df$cp[dat.df$cp==1]<- "Angina Típica"
dat.df$cp[dat.df$cp==2]<- "Angina Atípica"
dat.df$cp[dat.df$cp==3]<- "Dolor no Anginal"
dat.df$cp[dat.df$cp==4]<- "Asintomático"
glimpse(dat.df)
dat.df$cp
str(dat.df)
glimpse(dat.df)
glimpse(dat.df)
# Variable fbs (azúcar en sangre en ayunas > 120 mg/dl)
dat.df$fbs[dat.df$fbs==0]<- "azúcar en sangre en ayunas ≤ 120 mg/dl"
dat.df$fbs[dat.df$fbs==1]<- "azúcar en sangre en ayunas > 120 mg/dl"
glimpse(dat.df)
save.image("DBS.RDATA")
```{r Exit, message=FALSE, warning=FALSE}
getwd() # Identify the current working directory.
ls() # List all objects in the working
# directory.
ls.str() # List all objects, with finite detail.
list.files() # List files at the PC directory.
save.image("DBS.RDATA")
getwd() # Identify the current working directory.
ls() # List all objects in the working
# directory.
ls.str() # List all objects, with finite detail.
list.files() # List files at the PC directory.
alarm() # Alarm, notice of upcoming action.
q() # Quit this session.
```{r Housekeeping, message=FALSE, warning=FALSE}
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.sto
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.sto
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
rm(data.df)
rm(list = ls())
library(tidyverse)
library(plotly)
library(DT)
library(utf8)
library(readr)
library(ggplot2)
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.sto
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
rm(data.df)
library(DiagrammeR)
rm(list = ls()) # CAUTION: Remove all files in the
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística") #Copy & Paste the
getwd() # Confirm the working directory.
load("DBS.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.sto
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
rm(data.df)
save.image("DBS.RDATA")
knit_with_parameters("C:/Users/juand/iCloudDrive/Research/CME/2024 - Diplomado en Bioestadística/02 - Estadística Descriptiva/GaviRia.Rmd")
glimpse(dat.df)
dat.df$fbs
glimpse(dat.df)
glimpse(dat.df)
[dat.df$fbs
dat.df$fbs
dat.df$restecg
# Variable restecg (Resultados electrocardiográficos en reposo)
dat.df$restecg[dat.df$restecg==0]<- "Normal"
dat.df$restecg[dat.df$restecg==1]<- "Tener anormalidad de onda ST-T (inversiones de onda T y / o elevación o Depresión de ST de > 005 mV)"
dat.df$restecg[dat.df$restecg==2]<- "Muestra hipertrofía ventricular izquierda probable o definitiva según los criterios de Estes."
glimpse(dat.df)
str(dat.df)
glimpse(dat.df)
# Variable exang (Angina inducida por el ejercicio)
dat.df$exang[dat.df$exang==0]<- "No"
dat.df$exang[dat.df$exang==0]<- "Si"
# Variable ca (Numero de vasos principales (0-3) coloreados por fluoroscopia)
dat.df$ca <- as.numeric(dat.df$ca)
glimpse(dat.df)
str(dat.df)
glimpse(dat.df)
dat.df$exang[dat.df$exang==1]<- "Si"
glimpse(dat.df)
# Variable slope (La pendiente del segmento ST de ejercicio pico)
dat.df$slope[dat.df$slope==1]<- "Ascenso"
dat.df$slope[dat.df$slope==2]<- "Plano"
dat.df$slope[dat.df$slope==3]<- "Descenso"
glimpse(dat.df)
# Variable thal (El estado del corazón según la prueba de Thallium)
dat.df$thal <- as.numeric(dat.df$thal)
# Variable num (Presencia de enfermedad cardíaca (estado de enfermedad angiográfica)
dat.df$num[dat.df$num==0]<- "Saludable"
dat.df$num[dat.df$num==1]<- "Etapa 1"
dat.df$num[dat.df$num==2]<- "Etapa 2"
dat.df$num[dat.df$num==3]<- "Etapa 3"
dat.df$num[dat.df$num==4]<- "Etapa 4"
glimpse(dat.df)
save.image("DBS.RDATA")
save.image("DBS.rdata.df")
save.image("DBS.rdata")
getwd() # Identify the current working directory.
dat.df
glimpse(dat.df)
library(tidyverse)
library(plotly)
library(DT)
library(utf8)
library(readr)
library(ggplot2)
library(DiagrammeR)
glimpse(dat.df)
```
summary(dat.df)
apply(is.na(dat.df), 2, sum)
.libPaths() # Library pathname.
.Library # Library pathname.
summary(dat.df)
dat.df$sex <- as.factor(dat.df$sex)
summary(dat.df)
save.image("DBS.rdata")
dat.df$cp <- as.factor(dat.df$cp)
dat.df$fbs <- as.factor(dat.df$fbs)
dat.df$restecg <- as.factor(dat.df$restecg)
dat.df$exang <- as.factor(dat.df$exang)
dat.df$exang <- as.factor(dat.df$exang)
dat.df$slope <- as.factor(dat.df$slope)
dat.df$num <- as.factor(dat.df$num)
summary(dat.df)
glimpse(dat.df)
str(dat.df)
dat.df$ca <- as.integer(dat.df$ca)
str(dat.df)
summary(dat.df)
dat.df$fbs <- as.integer(dat.df$fbs)
dat.df$age <- as.integer(dat.df$age)
caf <- dat.df$ca
summary(caf)
caf <-  as.factor(caf)
summary(caf)
dat.df$ca <- as.factor(dat.df$ca)
summary(dat.df)
dat.df$ca <- as.integer(dat.df$ca)
summary(dat.df)
dat.df$ca
str(dat.df)
glimpse(dat.df)
str(dat.df)
dat.df$fbs <- as.factor(dat.df$fbs)
str(dat.df)
# Variable fbs (azúcar en sangre en ayunas > 120 mg/dl)
dat.df$fbs[dat.df$fbs==0]<- "azúcar en sangre en ayunas ≤ 120 mg/dl"
dat.df$fbs[dat.df$fbs==1]<- "azúcar en sangre en ayunas > 120 mg/dl"
dat.df$fbs <- as.character(dat.df$fbs)
# Variable fbs (azúcar en sangre en ayunas > 120 mg/dl)
dat.df$fbs[dat.df$fbs==0]<- "azúcar en sangre en ayunas ≤ 120 mg/dl"
dat.df$fbs[dat.df$fbs==1]<- "azúcar en sangre en ayunas > 120 mg/dl"
str(dat.df)
dat.df$fbs
url_base= 'https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
dat2.df <- read.table(url_base, header = TRUE, sep = ",", quote = "", fill = TRUE)
names(dat.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
dat.df$fbs <- dat2.df$fbs
str(dat.df)
dat.df$fbs <- dat2.df$fbs
dat.df$fbs
dat2.df$fbs
dat2.df <- read.table(url_base, header = TRUE, sep = ",", quote = "", fill = TRUE)
names(dat.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
url_base= 'https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
dat2.df <- read.table(url_base, header = TRUE, sep = ",", quote = "", fill = TRUE)
names(dat.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
names(dat2.df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg","thalach","exang", "oldpeak","slope", "ca", "thal", "num")
dat.df$fbs <- dat2.df$fbs
str(dat.df)
# Variable fbs (azúcar en sangre en ayunas > 120 mg/dl)
dat.df$fbs[dat.df$fbs==0]<- "azúcar en sangre en ayunas ≤ 120 mg/dl"
dat.df$fbs[dat.df$fbs==1]<- "azúcar en sangre en ayunas > 120 mg/dl"
dat.df$fbs <- as.factor(dat.df$fbs)
summary(dat.df)
summary(dat.df)
dat.df$trestbps <- as.integer(dat.df$trestbps)
str(dat.df)
dat.df$chol <- as.integer(dat.df$chol)
dat.df$thalach <- as.integer(dat.df$thalach)
save.image("DBS.rdata")
dat.df$thal
library(ggplot2)
# Crear gráfico de barras para el sexo con colores diferentes para cada categoría
ggplot(dat.df, aes(x=factor(num), fill=factor(num))) +
geom_bar(color="black") +  # Color del borde de las barras
scale_fill_manual(values=c("0"="lightblue", "1"="lightcoral")) +  # Especificar colores para cada categoría
labs(title="Distribucion por Sexo", x="Sexo", y="# de Personas") +
theme_minimal()
barplot(table(dat.df$Num),
main="Género: Barplot Frequency Distribution",
col=c("blue", "red"), ylim=c(0,120)) # Alter color - Y scale
plot(density(dat.df$Sexo, na.rm=TRUE),
main="Edad (Años) de los casos de Intentos de Suicidio
Hospital Susana López de Valencia, 2019",
col="red", lwd=5)
plot(density(dat.df$age, na.rm=TRUE),
main="Edad (Años) de los casos de Intentos de Suicidio
Hospital Susana López de Valencia, 2019",
col="red", lwd=5)
par(mfrow=c(2,3)) # 6 figures into a 2 row by 3 column grid
hist(dat.df$age, main="Edad (Años): Histogram")
plot(dat.df$age, main="Edad (Años): Plot")
plot(density(dat.df$age, na.rm=TRUE), # na.rm=TRUE
main="Edad (Años): Density Plot") # missing data
boxplot(dat.df$age,
main="Edad (Años): Box Plot")
stripchart(dat.df$age,
main="Edad (Años): Stripchart") # Stripchart
qqnorm(dat.df$age, main="Edad (Años): Q-Q Plot")
# DATA DISTRIBUTION AND TEST FOR NORMALITY --------------------------------
shapiro.test(dat.df$age) #What a Beauty! # Shapiro Test
nortest::ad.test(age) #The Anderson-Darling Test for Normal Dist.
attach(dat.df)
nortest::ad.test(age) #The Anderson-Darling Test for Normal Dist.
RVAideMemoire::mshapiro.test(dat.df$age) # Normality test of Lbs overall
RVAideMemoire::byf.shapiro(age ~ sex,
data=dat.df) # Normality test of Edad by Sexo
save.image("DBS.rdata")
q() # Quit this session.
