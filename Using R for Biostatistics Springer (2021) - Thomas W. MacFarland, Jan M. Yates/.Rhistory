pch=20, ylab="auto",
main="Sorted Dotplot of Edad (Años) por Procedencia",
cex.X.axis=1.25, # Note X axis label size.
cex.Y.axis=1.25, # Note Y axis label size.
font.lab=2, dot.col="auto")
epiDisplay::summ(dat.df$Edad,
by=Genero, # Breakout statistics
graph=TRUE, # Dotplot
pch=20, ylab="auto",
main="Sorted Dotplot of Edad (Años) por Genero",
cex.X.axis=1.25, # Note X axis label size.
cex.Y.axis=1.25, # Note Y axis label size.
font.lab=2, dot.col="auto")
s20x::summaryStats(dat.df$Estrato,
na.rm=TRUE) # Accommodate missing values.
library(s20x) # Load the s20x package.
s20x::summaryStats(dat.df$Estrato,
na.rm=TRUE) # Accommodate missing values.
s20x::summaryStats(dat.df$Edad,
na.rm=TRUE) # Accommodate missing values.
s20x::summaryStats(Edad ~ Sexo, dat.df,
na.rm=TRUE) # Accommodate missing values
s20x::summaryStats(dat.df$Edad,
na.rm=TRUE) # Accommodate missing values.
s20x::summaryStats(Edad ~ Genero, dat.df,
na.rm=TRUE) # Accommodate missing values
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp=’basic’)
s20x::summaryStats(Estrato ~ EstadoCivil, dat.df,
na.rm=TRUE) # Accommodate missing values
s20x::summaryStats(Edad ~ EstadoCivil, dat.df,
na.rm=TRUE) # Accommodate missing values
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
data=dat.df), plot=TRUE, suppressText=FALSE,
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Procedencia + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + NumeroIntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Procedencia + NumeroIntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Procedencia + Estrato,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
library(dplyr)
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ EstadoCivil + NumeroIntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Ocupacion + NumeroIntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Ocupacion + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Edad + NumeroIntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
####### CONTINGENCY TABLES #######
table(dat.df$Edad, dat.df$Genero) #
glimpse(dat.df)
####### CONTINGENCY TABLES #######
table(dat.df$Genero, dat.df$Riesgo) #
table(dat.df$Estrato, dat.df$Riesgo) #
table(dat.df$Genero, dat.df$Riesgo, #
useNA=c("always"))
table(dat.df$Estrato, dat.df$Riesgo, #
useNA=c("always"))
prop.table(table(dat.df$Genero, #
dat.df$Riesgo, useNA=c("always")))
prop.table(table(dat.df$Estrato, #
dat.df$Riesgo, useNA=c("always")))
xtabs(~Genero+Riesgo, data=dat.df) #
ftable(xtabs(~Estrato+Riesgo, data=dat.df)) #
##Higlight##
RcmdrMisc::numSummary(dat.df[,c("Edad", "NumeroIntentosPrevios", "EstanciaHospitalaria")],
groups=Procedencia) # Default printout, breakouts by Section
##Higlight##
RcmdrMisc::numSummary(dat.df[,c("Edad", "NumeroIntentosPrevios", "EstanciaHospitalaria")],
groups=Procedencia) # Default printout, breakouts by Section
RcmdrMisc::numSummary(dat.df[,c("Edad")],
groups=Genero) # Default printout, breakouts by Gender
library(s20x) # Load the s20x package.
s20x::summaryStats(dat.df$Edad,
na.rm=TRUE) # Accommodate missing values.
### CONTINGENCY TABLES
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + Riesgo, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
data=dat.df), plot=TRUE, suppressText=FALSE,
### CONTINGENCY TABLES
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Genero + Riesgo, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Estrato + Riesgo,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
### CONTINGENCY TABLES
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Genero, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Estrato,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Procedencia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.dr)
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Ocupacion,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Motivos,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Motivos + Riesgo,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Escolaridad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + TieneEnfermedadFisica,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + EstadoCivil,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + IntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ IntentosPrevios + Riesgo,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + Genero,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + Estrato,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + Procedencia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + IntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + TieneEnfermedadFisica,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Metodo + TieneEnfermedadMental,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ PersistenciaIdeacion + Genero,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ PersistenciaIdeacion + Procedencia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + IntentosPrevios, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
data=dat.df), plot=TRUE, suppressText=FALSE,
par(ask=TRUE); s20x::rowdistr(crosstabs(~ PersistenciaIdeacion + Etnia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ PersistenciaIdeacion + IntentosPrevios,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ DeterminacionRiesgo + AltaVoluntaria,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ FueRemitido + AltaVoluntaria,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
data=dat.df), plot=TRUE, suppressText=FALSE,
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Subregistro + AltaVoluntaria,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Subregistro + AltaMismoDia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Edad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Etnia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Genero,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + EstadoCivil,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Ocupacion,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Procedencia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Estrato,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Escolaridad,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + TieneEnfermedadFisica,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + EnfermedadFisica,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + TieneEnfermedadMental,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + EnfermedadMental,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Dia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Mes,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Lugar,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Metodo,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Motivo,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Motivos,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Premeditacion,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Planificacion,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + GestosDespedida,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
glimpse(dat.df)
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Subregistro + AltaMismoDia,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Subregistro + AltaVoluntaria,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
### CONTINGENCY TABLES
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + IntentosPrevios, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + Mes,
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
### CONTINGENCY TABLES
par(ask=TRUE); s20x::rowdistr(crosstabs(~ Riesgo + IntentosPrevios, # Categorical → numeric
data=dat.df), plot=TRUE, suppressText=FALSE,
comp="basic")
save.image("IntentodeSuicidioHSLV2019.rdata")
getwd() # Identify the current working directory.
ls() # List all objects in the working
# directory.
ls.str() # List all objects, with finite detail.
list.files() # List files at the PC directory.
print (40+100)/878
print (40*100)/878
load("C:/Users/juand/iCloudDrive/Work/2023 - 07 - 09 - Intento de Suicidio HSLV 2019/IntentodeSuicidioHSLV2019.RDATA")
# HOUSEKEEPING ------------------------------------------------------------
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Library/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates") #Copy & Paste the
getwd() # Confirm the working directory.
load("C:/Users/juand/iCloudDrive/Library/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
# OPEN LIBRARIES ####
library(Hmisc)
library(tidyverse)
library(dplyr)
library(effsize)
library(Hmisc)
library(pivottabler)
library(arsenal)
library(s20x)
library(asbio)
library(effsize)
library(epiDisplay)
library(psych)
library(doBy)
library(tables)
library(pastecs)
library(furniture)
library(RVAideMemoire)
library(UsingR)
library(nortest)
library(waffle)
library(scales)
library(grid)
library(gridExtra)
library(ggmosaic)
library(ggthemes)
library(ggplot2)
library(gtsummary)
library(lubridate)
library(RcmdrMisc)
# HOUSEKEEPING ------------------------------------------------------------
date() # Current system time and date.
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Library/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates") #Copy & Paste the
getwd() # Confirm the working directory.
load("C:/Users/juand/iCloudDrive/Library/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates/Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates.RDATA")
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.
par("mar") # Confirm default margin (BLTR)
par(mar = c(5.1, 4.1, 4.1, 2.1)) #adjust plot margins
### 3.10 Addendum 2: Parametric v Nonparametric Mann-Whitney U Test ####
onewaytests::mw.test(PctButterfat ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(PctProtein ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(Edad ~ Genero,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
glimpse(dat.df)
# OPEN LIBRARIES ####
library(arsenal)
library(asbio)
library(coin)
library(doBy)
library(dplyr)
library(dslabs)
library(effsize)
library(furniture)
library(grid)
library(gridExtra)
library(epiDisplay)
library(ggmosaic)
library(ggplot2)
library(ggthemes)
library(gtsummary)
library(Hmisc)
library(lattice)
library(lubridate)
library(nortest)
library(onewaytests)
library(pastecs)
library(pivottabler)
library(psych)
library(RcmdrMisc)
library(RVAideMemoire)
library(s20x)
library(scales)
library(sur)
library(tables)
library(tidyverse)
library(UsingR)
library(waffle)
onewaytests::mw.test(Edad ~ Genero,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(Edad ~ Sexo,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(NumeroIntentosPrevios ~ Sexo,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(NumeroIntentosPrevios ~ EnfermedadMental,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
glimpse(dat.df)
onewaytests::mw.test(NumeroIntentosPrevios ~ TieneEnfermedadMental,
data=dat.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(PctProtein ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(PctProtein ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(PctProtein ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
onewaytests::mw.test(PctProtein ~ Breed.recode,
data=MilkBreedFatProt.df, alpha=0.05, na.rm=TRUE,
verbose=TRUE)
## 3.11 Addendum 3: Additional Practice Datasets for Data ####
# with Normal Distribution Patterns and Data That
# Do Not Exhibit Normal Distribution Patterns
### 3.11.1 Data with Normal Distribution Patterns ####
base::set.seed(8) # Set the seed.
#  create a dataframe of Systolic Blood Pressure data for 480
# Females, SBPF.df
SBPF.df <- data.frame(
Gender <- replicate(480, "F"),
SBP <- round(rnorm(480, mean=118, sd=02))
)
colnames(SBPF.df) <- c("Gender","SBP")
str(SBPF.df)
names(SBPF.df)
attach(SBPF.df) # Attach the dataset
head(SBPF.df, 5) # Look at the first 5 rows of data
tail(SBPF.df, 5) # Look at the last 5 rows of data
summary(SBPF.df) # Summary descriptive statistics
glimpse(SBPF.df)
ls()
rm(Gender)
rm(SBP)
ls()
# create a dataframe of Systolic Blood Pressure data for
# 500 Males, SBPM.df.
SBPM.df <- data.frame(
# create a dataframe of Systolic Blood Pressure data for
# 500 Males, SBPM.df.
SBPM.df <- data.frame(
Gender <- replicate(500, "M"),
SBP <- round(rnorm(500, mean=120, sd=16))
)
colnames(SBPM.df) <- c("Gender","SBP")
str(SBPM.df)
# create a dataframe of Systolic Blood Pressure data for
# 500 Males, SBPM.df.
SBPM.df <- data.frame(
Gender <- replicate(500, "M"),
SBP <- round(rnorm(500, mean=120, sd=16))
)
colnames(SBPM.df) <- c("Gender","SBP")
str(SBPM.df)
names(SBPM.df)
attach(SBPM.df) # Attach the dataset
head(SBPM.df, 5) # Look at the first 5 rows of data
tail(SBPM.df, 5) # Look at the last 5 rows of data
summary(SBPM.df) # Summary descriptive statistics
gimpse(SBPM.df)
glimpse(SBPM.df)
ls()
rm(Gender)
rm(SBP)
ls()
SBPFM.df <- rbind(SBPF.df, SBPM.df)
attach(SBPFM.df) # Attach the dataset
head(SBPFM.df, 5) # Look at the first 5 rows of data
tail(SBPFM.df, 5) # Look at the last 5 rows of data
summary(SBPFM.df) # Summary descriptive statistics
glimpse(SBPFM.df)
summary(SBPF.df) # Summary descriptive statistics
summary(SBPM.df) # Summary descriptive statistics
summary(SBPFM.df) # Summary descriptive statistics
# EXIT --------------------------------------------------------------------
getwd() # Identify the current working directory.
ls() # List all objects in the working
# directory.
ls.str() # List all objects, with finite detail.
list.files() # List files at the PC directory.
save.image("Using R for Biostatistics Springer (2021) - Thomas W. MacFarland, Jan M. Yates.rdata")
getwd() # Identify the current working directory.
ls() # List all objects in the working
# directory.
ls.str() # List all objects, with finite detail.
list.files() # List files at the PC directory.
alarm() # Alarm, notice of upcoming action.
q() # Quit this session.
