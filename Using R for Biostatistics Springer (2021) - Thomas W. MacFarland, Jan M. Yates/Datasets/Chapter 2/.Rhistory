h=hist(Melanoma$time, plot = F)
h$breaks
h$counts
h1=hist(Melanoma$time, breaks = 5)
h1=hist(Melanoma$time, plot = F)
h$breaks
h1$breaks
h1<-hist(Melanoma$time, breaks = 5)
h1=hist(Melanoma$time, plot = F)
h1$breaks
h1$counts
library(MASS)
hist(Melanoma$time)
h=hist(Melanoma$time, plot = 5)
h$breaks
h$counts
h1=hist(Melanoma$time, breaks = 5)
h1<-hist(Melanoma$time, breaks = 5)
h1=hist(Melanoma$time, plot = F)
h1$breaks
h1$counts
library(MASS)
hist(Melanoma$time)
h=hist(Melanoma$time, plot = F)
h$breaks
h$counts
h1<-hist(Melanoma$time, breaks = 5)
h1=hist(Melanoma$time, plot = F)
h1$breaks
h1$counts
h2<-hist(Melanoma$time, breaks = 20)
h2=hist(Melanoma$time, plot = F)
h2$breaks
h2$counts
h1=hist(Melanoma$time,Plot=F)
h1$breaks
h1$counts
h1$breaks
h<-hist(Melanoma$time,
prob=T,
main = "Survival time",
xlab = "Population")
X<-na.omit(Melanoma$time)
h<-hist(X, breaks=20, na.omit=T,
prob=T,
main = "Survival Time",
xlab = "Population")
lines(density(X))
b<-boxplot(Melanoma$time,horizontal=T)
b$stats
sort(b$out)length(b$out)
sort(b$out)
length(b$out)
b1<-boxplot(Melanoma$time, Vertical =T)
b<-boxplot(birthwt$age,horizontal=T)
b$stats
b2<-boxplot(birthwt$age,horizontal=T)
b2$stats
#generate boxplot rule-defined outliers, list in ascending order, and count the number of scores
sort(b2$out)
length(b2$out)
View(UScereal$calories)
mean(UScereal$calories)
median(UScereal$calories)
mode(UScereal$calories)
mean(UScereal$calories, tr=1)
mean(UScereal$calories, tr=.1)
mean(UScereal$calories, tr=.1,)
sd(UScereal$calories)
mad(UScereal$calories)
IQR(UScereal$calories)
library(dplyr)
tab<-table(UScereal$calories)
sorted_tab <- tab %>%
as.data.frame() %>%
arrange(desc(Freq))
head(sorted_tab)
hist(UScereal$calories)
h=hist(UScereal$calories, plot = F)
h$breaks
h$counts
h<-hist(UScereal$calories, breaks=20,
prob=T,
main = "Calories in USCereals",
xlab = "Calories")
h<-hist(UScereal$calories,
+         prob=T,
h<-hist(UScereal$calories,
+         prob=T,
X<-na.omit(UScereal$calorie)
h<-hist(X, breaks=20, na.omit=T,
prob=T,
main = "Edad de los Participantes",
xlab = "Edad (años)")
lines(density(X))
b<-boxplot(UScereal$calories,horizontal=T)
b$stats
sort(b$out)
length(b$out)
tab<-prop.table(table(cats$Sex))*100
barplot(tab,ylim=c(0,100),ylab = "Percentage(%)",las=2)
load("C:/Users/juand/iCloudDrive/Research/SeGrEMO/Proyectos de Investigación/2023 - 07 - 09 - Intento de Suicidio HSLV 2019/Rdata.RData")
mean(dat$Sexo)
mean(dat$Edad)
bwplot(Sexo~Edad,data=dat)
##EXPLORING BIVARIATE DATA (DIRECTION [+, -], & MAGNITUD)
library(lattice)
bwplot(Sexo~Edad,data=dat)
bwplot(Sexo~NumeroIntentosPrevios, na.rm=T, data=dat)
bwplot(Sexo~NumeroIntentosPrevios, data=dat)
bwplot(Sexo~EstanciaHospitalaria, data=dat)
bwplot(Sexo~EstanciaHospitalaria, na.rm=T, data=dat)
bwplot(Sexo~Estrato, na.rm=T, data=dat)
bwplot(Ocupación~Edad,data=dat)
bwplot(Ocupacion~Edad,data=dat)
bwplot(Ocupacion~NumeroIntentosPrevios, na.rm=T, data=dat)
bwplot(EstadoCivil~NumeroIntentosPrevios, na.rm=T, data=dat)
bwplot(EstadoCivil~NumeroIntentosPrevios, na.rm=T, data=dat)
bwplot(Sexo~Edad,data=dat)
bwplot(Sexo~NumeroIntentosPrevios, na.rm=T, data=dat)
bwplot(Sexo~EstanciaHospitalaria, na.rm=T, data=dat)
bwplot(Sexo~Estrato, na.rm=T, data=dat)
tapply(dat$Sexo,dat$Edad,mean,na.rm=TRUE)
()
tapply(dat$Sexo,dat$Edad,mean,na.rm=TRUE)
#MAKING THE DATASET READEABLE
dat<-INTSUIDATASET
tapply(dat$Sexo,dat$Edad,mean,na.rm=TRUE)
##EXPLORING BIVARIATE DATA (DIRECTION [+, -], & MAGNITUD)
library(lattice)
tapply(dat$Sexo,dat$Edad,mean,na.rm=TRUE)
tapply(dat$Edad,dat$Sexo,mean,na.rm=TRUE)
tapply(dat$Edad,dat$Sexo,median,na.rm=TRUE)
histogram(~NumeroIntentosPrevios|Sexo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~EstanciaHospitalaria|Sexo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~EstanciaHospitalaria|Procedencia,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~NumeroIntentosPrevios|Procedencia,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~EStanciaHospitalaria|Procedencia,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~EstanciaHospitalaria|Procedencia,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~Edad|Procedencia,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~Edad|Sexo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
tapply(dat$Edad,dat$Sexo,sd,na.rm=TRUE)
tapply(dat$Edad,dat$Sexo,mad,na.rm=TRUE)
bwplot(IntentosPrevios~Edad,data=dat)
bwplot(IntentosPrevios~Edad,na.rm=T, data=dat)
bwplot(IntentosPrevios, na.rm=T, ~Edad,data=dat)
bwplot(IntentosPrevios~Edad,data=dat)
bwplot(Sexo~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,median,na.rm=TRUE)
bwplot(Procedencia~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Procedencia,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Procedencia,median,na.rm=TRUE)
bwplot(EstadoCivil~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$EstadoCivil,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$EstadoCivil,median,na.rm=TRUE)
bwplot(Ocupacion~NumeroIntentosPrevios,data=dat)
bwplot(Ocupacion~NumeroIntentosPrevios,data=dat)
bwplot(Ocupacion~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Procedencia,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Escolaridad,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$PersistenciaIdeacion,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$EstadoCivil,median,na.rm=TRUE)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,data=dat)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,data=dat)
##EXPLORING BIVARIATE DATA (DIRECTION [+, -], & MAGNITUD)
library(lattice)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,data=dat)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,No hubo evaluación.rm=T, data=dat)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,No hubo evaluación=T, data=dat)
bwplot(PersistenciaIdeacion~NumeroIntentosPrevios,data=dat)
bwplot(Sexo~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,median,na.rm=TRUE)
histogram(~Edad|Sexo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
tapply(dat$NumerodeIntentosPrevios,dat$Sexo,sd,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,sd,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Sexo,mad,na.rm=TRUE)
mode(dat$Sexo)
##EXPLORING BIVARIATE DATA (DIRECTION [+, -], & MAGNITUD)
#Please take into account that the Y axis= Outcome (dependant/Outcome Variable)
#Please take into account that the X axis= Predictor (independant/predictor Variable)
library(lattice)
bwplot(Lugar~NumeroIntentosPrevios,data=dat)
bwplot(Lugar~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Lugar,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Remision,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$PersistenciaIdeacion,median,na.rm=TRUE)
bwplot(Edad~NumeroIntentosPrevios,data=dat)
bwplot(Riesgo~NumeroIntentosPrevios,data=dat)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,median,na.rm=TRUE)
histogram(~NumeroIntentosPrevios|Riesgo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,sd,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,mad,na.rm=TRUE)
bwplot(Riesgo~NumeroIntentosPrevios,data=dat, na.rm=T)
bwplot(Riesgo~NumeroIntentosPrevios,data=dat, na.rm=T,)
bwplot(Riesgo~NumeroIntentosPrevios,data=dat)
###CENTRAL TENDENCY STATISTICS (LOCATION) - FOR CONTINUOS AND DISCRETE VARIABLES
#Mean (non-resistant): is the base for Standard Deviation (SD)
#Median (resistant): is the base for Interquartil Range (IQR)
#Trimmed Mean (Resistant)
mean(dat$Edad)
median(dat$Edad)
mean(dat$Edad, tr=.1,)
mode(dat$Edad)
mean(dat$Estrato, na.rm=T)
median(dat$Estrato, na.rm=T)
mean(dat$Estrato, na.rm=T, tr=.1,)
mean(dat$NumeroIntentosPrevios, na.rm=T)
median(dat$NumeroIntentosPrevios, na.rm=T)
mean(dat$EstanciaHospitalaria)
median(dat$EstanciaHospitalaria)
#explore multi-modality
#create a frequency table, sort it by frequency, then print just the first
#(continued) 6 rows of the table (i.e., the most frequent values)
library(dplyr)
tab<-table(dat$Edad)
sorted_tab <- tab %>%
as.data.frame() %>%
arrange(desc(Freq))
head(sorted_tab)
#explore multi-modality
#create a frequency table, sort it by frequency, then print just the first
#(continued) 6 rows of the table (i.e., the most frequent values)
library(dplyr)
hist(dat$Edad)
h=hist(dat$Edad,plot=F)
h$counts
h$breaks
h<-hist(dat$Edad, breaks=20,
prob=T,
main = "Edad de los participantes",
xlab = "Edad (Años)")
tab<-table(dat$NumeroIntentosPrevios)
sorted_tab <- tab %>%
as.data.frame() %>%
arrange(desc(Freq))
head(sorted_tab)
#create table of category percentages for plotting, then plot (note that with missing data, the table is not created)
tab<-prop.table(table(dat$Riesgo))*100
###FREQUENCY STATISTICS (PROPORTIONS) - FOR CATEGORICAL VARIABLES
library(janitor)
#create table of category percentages for plotting, then plot (note that with missing data, the table is not created)
tab<-prop.table(table(dat$Riesgo))*100
#create table of category percentages for plotting, then plot (note that with missing data, the table is not created)
tab<-prop.table(table(dat$Riesgo))*100
barplot(tab,ylim=c(0,100),ylab = "Percentage(%)",las=2)
barplot(tab,ylim=c(0,100),ylab = "Percentage(%)",las=2, na.rm=T)
barplot(tab,ylim=c(0,100),ylab = "Percentage(%)",las=2, na.rm=T,)
barplot(tab,ylim=c(0,100),ylab = "Percentage(%)",las=2)
histogram(~NumeroIntentosPrevios|Riesgo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
histogram(~Edad|Riesgo,data=dat,
type="density",
breaks=seq(0,80,by=2.5),
layout=c(1,2))
mean(dat$NumeroIntentosPrevios, na.rm=T)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,mean,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,median,na.rm=TRUE)
tapply(dat$Edad,dat$Riesgo,mad,na.rm=TRUE)
tapply(dat$Edad,dat$Riesgo,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Riesgo,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$Hospitalizacion,median,na.rm=TRUE)
tapply(dat$NumeroIntentosPrevios,dat$FueHospitalizado,median,na.rm=TRUE)
tapply(dat$Edad,dat$FueHospitalizado,median,na.rm=TRUE)
###FREQUENCY STATISTICS (PROPORTIONS) - FOR CATEGORICAL VARIABLES
library(janitor)
tabyl(dat)
tabyl(dat)
tabyl(data.frame())
tabulate(dat)
tabyl(dat$Sexo, dat$Edad, dat$Etnia)
tabyl(dat$Sexo, dat$Edad, dat$Etnia, nar.rm=T)
tabyl(dat$Sexo, dat$Edad, dat$Etnia, na.rm=T)
tabyl(dat$Sexo, dat$Edad, dat$Etnia, na.rm=T,)
tabyl(dat$Sexo, dat$Edad, dat$Etnia, na.rm=T)
tabyl(dat$Sexo, dat$Edad)
tabyl(dat$Sexo)
tabyl(dat$Sexo, dat$Dia)
tabyl(dat$Sexo,Edad)
tabyl(dat$Sexo,Edad)
tabyl(dat$Sexo, Edad)
tabyl(dat$Sexo, Edad,)
tabyl(dat Sexo, Eddad,)
tabyl(dat Sexo, Edad,)
tabyl(dat$Sexo, Edad)
tab <- table(df$row_variable, df$column_variable)
tab <- tabyl(df$row_variable, df$column_variable)
help(tabyl)
tabyl(dat$Etnia, show_na = T)
tabyl(dat$Etnia, show_missing_levels = T)
source("C:/Users/juand/iCloudDrive/Research/SeGrEMO/Proyectos de Investigación/2023 - 07 - 09 - Intento de Suicidio HSLV 2019/IntSuiScript.R")
library(tidyverse)
#Create
install.packages("rmarkdown")
print(rnorm(100, mean=120, sd=6))
##The date() function is used to provide a marker for when the R session is
date()
search()
options(digits = 6)
View(b)
View(INTSUIDATASET)
#explore multi-modality
#create a frequency table, sort it by frequency, then print just the first
#(continued) 6 rows of the table (i.e., the most frequent values)
library(dplyr)
options(width = 60)
tab<-table(dat$Edad)
sorted_tab <- tab %>%
as.data.frame() %>%
arrange(desc(Freq))
head(sorted_tab)
options(width = 100)
tab<-table(dat$Edad)
sorted_tab <- tab %>%
as.data.frame() %>%
arrange(desc(Freq))
head(sorted_tab)
options(width = 60)
search()
# List all objects with finite detail.
ls.str()
# Identify the current working directory.
getwd()
# List files at the PC directory.
list.files()
# Library pathname.
.libPaths()
# Attached packages and objects.
search()
########################################################################
############################### HOUSEKEEPING ###########################
########################################################################
date() # Current system time and date.
Sys.time() # Current system time and date (redundant).
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
# working directory. If this
# action is not desired, use rm()
# one-by-one to remove the objects
# that are not needed.
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/SeGrEMO/Proyectos de Investigación/2023 - 07 - 09 - Intento de Suicidio HSLV 2019/INTSUIDATASET.csv")
# Use the utils::read.table() function to import the
# .csv file INtSUIDATASET.csv into the current R
# session and place the contents into the object
# dat.df, which is a dataframe that: (1) has a
# header row, (2) uses a period for decimals, and (3)
# uses a comma to separate one field from another.
#
# Note how the utils package is available as one of the
# packages immediately put into use when a R session is
# first started.
dat.df <- utils::read.table (file =
"INTSUIDATASET.csv",
header=TRUE, dec=".", sep=",")
getwd() # Identify the working directory
ls() # List objects
attach(dat.df) # Attach the data, for later use
str(dat.df) # Identify structure
head(dat.df, n=3) # Show the head, 1st 3 cases
summary(dat.df) # Summary statistics
#MAKING THE DATASET READEABLE
dat<-INTSUIDATASET
INTSUIDATASET <- read.csv("C:/Users/juand/iCloudDrive/Research/SeGrEMO/Proyectos de Investigación/2023 - 07 - 09 - Intento de Suicidio HSLV 2019/INTSUIDATASET.csv")
View(INTSUIDATASET)
str(dat.df) # Identify structure
str(dat) # Identify structure
str(dat) # Identify structure
ls() # List objects
attach(dat) # Attach the data, for later use
#MAKING THE DATASET READEABLE
dat<-INTSUIDATASET
getwd() # Identify the working directory
ls() # List objects
attach(dat) # Attach the data, for later use
str(dat) # Identify structure
head(dat, n=3) # Show the head, 1st 3 cases
summary(dat) # Summary statistics
########################################################################
############################### HOUSEKEEPING ###########################
########################################################################
date() # Current system time and date.
Sys.time() # Current system time and date (redundant).
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
# working directory. If this
# action is not desired, use rm()
# one-by-one to remove the objects
# that are not needed.
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/Bioestatistics/R/Using R for Biostatistics-Springer (2021) - Thomas W. MacFarland, Jan M. Yates/Datasets/Chapter 2")
# Set to a new working directory.
# Note the single forward slash and double
# quotes.
# This new directory should be the directory
# where the data file is located, otherwise
# the data file will not be found.
getwd() # Confirm the working directory.
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.
###############################################################
# Use the utils::read.table() function to import the
# .csv file "GenderEndurance.csv" into the current R
# session and place the contents into the object
# GenEnd.df, which is a dataframe that: (1) has a
# header row, (2) uses a period for decimals, and (3)
# uses a comma to separate one field from another.
#
# Note how the utils package is available as one of the
# packages immediately put into use when a R session is
# first started.
GenEnd.df <- utils::read.table (file =
"CPIIISectionLbsGender.csv",
header=TRUE, dec=".", sep=",")
View(GenEnd.df)
########################################################################
############################### HOUSEKEEPING ###########################
########################################################################
date() # Current system time and date.
Sys.time() # Current system time and date (redundant).
R.version.string # R version and version release date.
options(digits=6) # Confirm default digits.
options(scipen=999)# Suppress scientific notation.
options(width=60) # Confirm output width.
ls() # List all objects in the working directory.
rm(list = ls()) # CAUTION: Remove all files in the
# working directory. If this
# action is not desired, use rm()
# one-by-one to remove the objects
# that are not needed.
ls.str() # List all objects with finite detail.
getwd() # Identify the current working directory.
setwd("C:/Users/juand/iCloudDrive/Research/Bioestatistics/R/Using R for Biostatistics-Springer (2021) - Thomas W. MacFarland, Jan M. Yates/Datasets/Chapter 2")
# Set to a new working directory.
# Note the single forward slash and double
# quotes.
# This new directory should be the directory
# where the data file is located, otherwise
# the data file will not be found.
getwd() # Confirm the working directory.
list.files() # List files at the PC directory.
.libPaths() # Library pathname.
.Library # Library pathname.
sessionInfo() # R version, locale, and packages.
search() # Attached packages and objects.
searchpaths() # Attached packages and objects.
###############################################################
CPIIISecLbsGen.df <- read.table (file =
"CPIIISectionLbsGender.csv",
header = TRUE, sep = ",") # Import the .csv file.
getwd() # Identify the working directory
ls() # List objects
attach(CPIIISecLbsGen.df) # Attach the data, for later use
str(CPIIISecLbsGen.df) # Identify structure
nrow(CPIIISecLbsGen.df) # List the number of rows
ncol(CPIIISecLbsGen.df) # List the number of columns
dim(CPIIISecLbsGen.df) # Dimensions of the data frame
names(CPIIISecLbsGen.df) # Identify names
colnames(CPIIISecLbsGen.df) # Show column names
rownames(CPIIISecLbsGen.df) # Show row names
head(CPIIISecLbsGen.df) # Show the head
tail(CPIIISecLbsGen.df) # Show the tail
CPIIISecLbsGen.df # Show the entire dataframe
summary(CPIIISecLbsGen.df) # Summary statistics
